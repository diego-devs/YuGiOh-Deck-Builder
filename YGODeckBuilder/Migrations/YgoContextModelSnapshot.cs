// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YGODeckBuilder.Data;

#nullable disable

namespace YGODeckBuilder.Migrations
{
    [DbContext(typeof(YgoContext))]
    partial class YgoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YGODeckBuilder.Data.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "deck_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeckId"));

                    b.Property<string>("DeckFilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "deck_file_path");

                    b.Property<string>("DeckName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "deck_name");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "file");

                    b.Property<int>("TotalCards")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "total_cards");

                    b.HasKey("DeckId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.BanlistInfo", b =>
                {
                    b.Property<int>("BanlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "banlistinfo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BanlistId"));

                    b.Property<string>("Ban_GOAT")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ban_goat");

                    b.Property<string>("Ban_OCG")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ban_ocg");

                    b.Property<string>("Ban_TCG")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ban_tcg");

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "card_id");

                    b.HasKey("BanlistId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("BanlistInfo");

                    b.HasAnnotation("Relational:JsonPropertyName", "banlist_info");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "card_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<string>("Archetype")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "archetype");

                    b.Property<int?>("Atk")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "atk");

                    b.Property<string>("Attribute")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "attribute");

                    b.Property<int?>("CardId1")
                        .HasColumnType("int");

                    b.Property<int?>("DeckId")
                        .HasColumnType("int");

                    b.Property<int?>("DeckId1")
                        .HasColumnType("int");

                    b.Property<int?>("DeckId2")
                        .HasColumnType("int");

                    b.Property<int?>("Def")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "def");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "desc");

                    b.Property<int>("KonamiCardId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int?>("Level")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "level");

                    b.Property<int?>("LinkVal")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "linkval");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "race");

                    b.Property<int?>("Scale")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "scale");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("CardId");

                    b.HasIndex("CardId1");

                    b.HasIndex("DeckId");

                    b.HasIndex("DeckId1");

                    b.HasIndex("DeckId2");

                    b.ToTable("Cards");

                    b.HasAnnotation("Relational:JsonPropertyName", "side_deck");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.CardImages", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("CardImageId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ImageLocalUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ImageLocalUrl");

                    b.Property<string>("ImageLocalUrlCropped")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ImageLocalUrlCroppped");

                    b.Property<string>("ImageLocalUrlSmall")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ImageLocalUrlSmall");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "image_url");

                    b.Property<string>("ImageUrlCropped")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "image_url_croppped");

                    b.Property<string>("ImageUrlSmall")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "image_url_small");

                    b.HasKey("ImageId");

                    b.HasIndex("CardId");

                    b.ToTable("Images");

                    b.HasAnnotation("Relational:JsonPropertyName", "card_images");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.CardPrices", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "price_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"));

                    b.Property<string>("Amazon")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "amazon_price");

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "card_id");

                    b.Property<string>("CardMarket")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "cardmarket_price");

                    b.Property<string>("CoolStuffInc")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "coolstuffinc_price");

                    b.Property<string>("Ebay")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ebay_price");

                    b.Property<string>("TcgPlayer")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "tcgplayer_price");

                    b.HasKey("PriceId");

                    b.HasIndex("CardId");

                    b.ToTable("CardPrices");

                    b.HasAnnotation("Relational:JsonPropertyName", "card_prices");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.CardSet", b =>
                {
                    b.Property<int>("CardSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "cardset_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardSetId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "card_id");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set_code");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set_name");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set_price");

                    b.Property<string>("Rarity")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set_rarity");

                    b.Property<string>("RarityCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set_rarity_code");

                    b.HasKey("CardSetId");

                    b.HasIndex("CardId");

                    b.ToTable("CardSets");

                    b.HasAnnotation("Relational:JsonPropertyName", "card_sets");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "collection_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "last_modified_date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<double>("Worth")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "worth");

                    b.HasKey("CollectionId");

                    b.ToTable("Collections");

                    b.HasAnnotation("Relational:JsonPropertyName", "collection");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.CollectionCard", b =>
                {
                    b.Property<int>("CollectionCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "collection_card_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionCardId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "card_id");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "collection_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "date_added");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "quantity");

                    b.HasKey("CollectionCardId");

                    b.HasIndex("CardId");

                    b.HasIndex("CollectionId");

                    b.ToTable("CollectionCards");

                    b.HasAnnotation("Relational:JsonPropertyName", "collection_cards");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.MiscInfo", b =>
                {
                    b.Property<int>("MiscId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "miscinfo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MiscId"));

                    b.Property<string>("BetaName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "beta_name");

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "card_id");

                    b.Property<int>("DownVotes")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "downvotes");

                    b.Property<int>("HasEffect")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "has_effect");

                    b.Property<string>("OcgDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ocg_date");

                    b.Property<string>("TcgDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "tcg_date");

                    b.Property<string>("TreatedAs")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "treated_as");

                    b.Property<int>("UpVotes")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "upvotes");

                    b.Property<long>("Views")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "views");

                    b.Property<int>("ViewsWeek")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "viewsweek");

                    b.HasKey("MiscId");

                    b.HasIndex("CardId");

                    b.ToTable("CardMiscInformation");

                    b.HasAnnotation("Relational:JsonPropertyName", "misc_info");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.SetInfo", b =>
                {
                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "setinfo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetId"));

                    b.Property<int>("NumOfCards")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "num_of_cards");

                    b.Property<string>("SetCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set_code");

                    b.Property<string>("SetName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "set_name");

                    b.Property<string>("TcgDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "tcg_date");

                    b.HasKey("SetId");

                    b.ToTable("SetInformation");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.BanlistInfo", b =>
                {
                    b.HasOne("YGODeckBuilder.Data.EntityModels.Card", null)
                        .WithOne("BanlistInfo")
                        .HasForeignKey("YGODeckBuilder.Data.EntityModels.BanlistInfo", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.Card", b =>
                {
                    b.HasOne("YGODeckBuilder.Data.EntityModels.Card", null)
                        .WithMany("Data")
                        .HasForeignKey("CardId1");

                    b.HasOne("YGODeckBuilder.Data.Deck", null)
                        .WithMany("ExtraDeck")
                        .HasForeignKey("DeckId");

                    b.HasOne("YGODeckBuilder.Data.Deck", null)
                        .WithMany("MainDeck")
                        .HasForeignKey("DeckId1");

                    b.HasOne("YGODeckBuilder.Data.Deck", null)
                        .WithMany("SideDeck")
                        .HasForeignKey("DeckId2");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.CardImages", b =>
                {
                    b.HasOne("YGODeckBuilder.Data.EntityModels.Card", null)
                        .WithMany("CardImages")
                        .HasForeignKey("CardId");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.CardPrices", b =>
                {
                    b.HasOne("YGODeckBuilder.Data.EntityModels.Card", null)
                        .WithMany("CardPrices")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.CardSet", b =>
                {
                    b.HasOne("YGODeckBuilder.Data.EntityModels.Card", null)
                        .WithMany("CardSets")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.CollectionCard", b =>
                {
                    b.HasOne("YGODeckBuilder.Data.EntityModels.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YGODeckBuilder.Data.EntityModels.Collection", "Collection")
                        .WithMany("CollectionCards")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.MiscInfo", b =>
                {
                    b.HasOne("YGODeckBuilder.Data.EntityModels.Card", null)
                        .WithMany("MiscInfo")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YGODeckBuilder.Data.Deck", b =>
                {
                    b.Navigation("ExtraDeck");

                    b.Navigation("MainDeck");

                    b.Navigation("SideDeck");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.Card", b =>
                {
                    b.Navigation("BanlistInfo");

                    b.Navigation("CardImages");

                    b.Navigation("CardPrices");

                    b.Navigation("CardSets");

                    b.Navigation("Data");

                    b.Navigation("MiscInfo");
                });

            modelBuilder.Entity("YGODeckBuilder.Data.EntityModels.Collection", b =>
                {
                    b.Navigation("CollectionCards");
                });
#pragma warning restore 612, 618
        }
    }
}
